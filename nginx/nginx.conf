upstream backend_upstream {
    # The backend service exposes Gunicorn on port 8000.  Docker
    # handles DNS resolution between containers, so the hostname
    # `backend` resolves to the correct container.
    server backend:8000;
}

upstream frontend_upstream {
    # The frontend service runs a small HTTP server on port 9000 that
    # serves the built React application.  See the frontend/Dockerfile
    # for details.
    server frontend:9000;
}

server {
    listen 80;
    index index.html;
    client_max_body_size 20m;

    # Proxy API and admin requests to the Django backend.  All paths
    # beginning with `/api/` or `/admin/` are handled by the backend.
    location /api/ {
        proxy_pass http://backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /admin/ {
        proxy_pass http://backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Serve static assets collected by Django.  These files live in the
    # shared `static` volume and are collected via the collectstatic
    # management command during deployment.
    location /static/ {
        alias /static/;
        access_log off;
        expires 30d;
    }

    # Serve user‑uploaded media files.  They are stored in the shared
    # `media` volume and exposed at `/media/`.
    location /media/ {
        alias /media/;
        access_log off;
        expires 30d;
    }

    # All other requests are served by the React frontend.  This
    # includes the single‑page application routes handled by React
    # Router.
    location / {
        proxy_pass http://frontend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}