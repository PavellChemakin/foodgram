version: '2.4'

services:
  db:
    image: postgres:13
    env_file: .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$$POSTGRES_USER", "-d", "$$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s
    networks: [foodgram_net]
    restart: always

  backend:
    image: pavellchemakin/foodgram_backend:latest
    env_file: .env
    volumes:
      # Mount the shared static volume at Django's STATIC_ROOT
      - static:/app/backend/static
      # Mount the shared media volume at Django's MEDIA_ROOT
      - media:/app/backend/media
    depends_on:
      db:
        condition: service_healthy
    expose: ["8000"]
    networks: [foodgram_net]
    restart: always

  frontend:
    image: pavellchemakin/foodgram_frontend:latest
    env_file: .env
    volumes:
      # Mount the shared static volume into /static so the build artifacts can be served
      - static:/static
    expose: ["9000"]
    networks: [foodgram_net]
    restart: always

  gateway:
    image: pavellchemakin/foodgram_gateway:latest
    env_file: .env
    volumes:
      # Serve static files and media files directly from volumes. Do not mount as read-only
      - static:/static
      - media:/media
      # Nginx configuration and SSL certificates remain read-only
      - ./infra/gateway/default.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt/live/foodgramvm.serveirc.com/fullchain.pem:/etc/nginx/certs/fullchain.pem:ro
      - /etc/letsencrypt/live/foodgramvm.serveirc.com/privkey.pem:/etc/nginx/certs/privkey.pem:ro
    ports:
      - "8000:80"
    depends_on:
      - backend
      - frontend
    networks: [foodgram_net]
    restart: always

volumes:
  pg_data:
  static:
  media:

networks:
  foodgram_net:
