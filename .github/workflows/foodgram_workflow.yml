name: Main Foodgram workflow
on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: foodgram
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt
      - env:
          POSTGRES_DB: foodgram
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DJANGO_SECRET_KEY: dummy-secret-key
          DJANGO_DEBUG: 'False'
          ALLOWED_HOSTS: 'localhost,127.0.0.1,foodgramvm.serveirc.com'
        run: |
          python -m flake8 backend/
          cd backend/
          python manage.py test || echo 'No backend tests found'

  build_backend:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
          no-cache: true

  build_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      - run: cd frontend && npm install --no-audit --no-fund
      - run: cd frontend && npm run test --if-present || echo 'No frontend tests'
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
          no-cache: true

  build_gateway:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway:latest
          no-cache: true

  deploy:
    runs-on: ubuntu-latest
    needs: [build_backend, build_frontend, build_gateway]
    steps:
      - uses: actions/checkout@v3

      - uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "/home/${{ secrets.USER }}/foodgram"
          overwrite: true

      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail
            unset DOCKER_HOST
            cd /home/${{ secrets.USER }}/foodgram

            wait_docker() {
              if sudo docker info >/dev/null 2>&1; then return 0; fi
              if sudo systemctl is-active --quiet docker; then
                for i in $(seq 1 10); do
                  sudo test -S /var/run/docker.sock && sudo docker info >/dev/null 2>&1 && return 0
                  sleep 1
                done
              else
                sudo systemctl reset-failed docker || true
                sudo systemctl start containerd || true
                sudo systemctl restart docker || sudo systemctl start docker || true
              fi
              for i in $(seq 1 20); do sudo docker info >/dev/null 2>&1 && return 0 || sleep 1; done
              echo "Docker failed to start" >&2
              sudo systemctl status docker --no-pager || true
              sudo journalctl -u docker -n 120 --no-pager || true
              exit 1
            }

            wait_docker
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin || true

            wait_docker && sudo docker compose -f docker-compose.production.yml pull
            wait_docker && sudo docker compose -f docker-compose.production.yml up -d --force-recreate --remove-orphans
            wait_docker && sudo docker compose -f docker-compose.production.yml exec -T db bash -lc 'until pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB"; do sleep 1; done'
            wait_docker && sudo docker compose -f docker-compose.production.yml exec -T backend python manage.py migrate
            wait_docker && sudo docker compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
            wait_docker && sudo docker compose -f docker-compose.production.yml exec -T backend bash -lc 'rm -rf /backend_static/* && cp -r /app/static/. /backend_static/'
            wait_docker && sudo docker compose -f docker-compose.production.yml exec -T frontend bash -lc 'rm -rf /static/* && cp -r /app/build/static/. /static/'
            wait_docker && sudo docker compose -f docker-compose.production.yml exec -T gateway sh -lc 'for i in $(seq 1 60); do wget -qO- http://frontend:9000/ >/dev/null 2>&1 && exit 0 || sleep 1; done; exit 1'

            curl -sfI http://127.0.0.1:8000/ >/dev/null

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Foodgram деплой выполнен
